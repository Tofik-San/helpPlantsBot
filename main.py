import logging
import os
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import (
    Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from service import get_plant_data, get_bot_info

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
app = FastAPI()

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_persistent_keyboard():
    keyboard = [
        [KeyboardButton("üîÑ –†–µ—Å—Ç–∞—Ä—Ç"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Inline –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_category_inline_keyboard():
    keyboard = [
        [InlineKeyboardButton("ü™¥ –°—É–∫–∫—É–ª–µ–Ω—Ç—ã", callback_data="category_–°—É–∫–∫—É–ª–µ–Ω—Ç—ã")],
        [InlineKeyboardButton("üåø –ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ", callback_data="category_–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ")],
        [InlineKeyboardButton("üå∏ –¶–≤–µ—Ç—É—â–∏–µ", callback_data="category_–¶–≤–µ—Ç—É—â–∏–µ")],
        [InlineKeyboardButton("üå± –õ–∏–∞–Ω—ã", callback_data="category_–õ–∏–∞–Ω—ã")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ä—Ç
def start(update):
    bot.send_message(
        chat_id=update.message.chat.id,
        text="üåø –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º. –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é –≤–Ω–∏–∑—É üëá",
        reply_markup=get_persistent_keyboard()
    )
    bot.send_message(
        chat_id=update.message.chat.id,
        text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=get_category_inline_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def handle_static_buttons(update):
    text = update.message.text.strip()
    if text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç":
        start(update)
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="""üåø –û –ø—Ä–æ–µ–∫—Ç–µ

–≠—Ç–æ—Ç –±–æ—Ç —Å–æ–∑–¥–∞–Ω –¥–ª—è —É–¥–æ–±–Ω–æ–π –ø–æ–º–æ—â–∏ –≤ —É—Ö–æ–¥–µ –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏. –ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é ‚Äî –∏ —Å—Ä–∞–∑—É –ø–æ–ª—É—á–∏—à—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É—Ö–æ–¥—É, –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—è–º–∏, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è–º–∏ –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏, –∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Ç–≤–æ–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è –∑–¥–æ—Ä–æ–≤—ã–º–∏ –∏ –∫—Ä–∞—Å–∏–≤—ã–º–∏.

üõ†Ô∏è –ö–∞–∫ —É—Å—Ç—Ä–æ–µ–Ω –±–æ—Ç?

–ü—Ä–æ–µ–∫—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç Telegram API, —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ Python –∏ FastAPI, —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –Ω–∞ PostgreSQL. –¢–∞–∫–∂–µ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ Telegram-–±–æ—Ç—ã (–ø–æ—Å—Ç–µ—Ä –∏ —Ö–µ–ª–ø–µ—Ä), —á—Ç–æ–±—ã –∏—Å–∫–ª—é—á–∏—Ç—å —Å–ø–∞–º –∏ –æ–±–µ—Å–ø–µ—á–∏—Ç—å –±–µ—Å–ø–µ—Ä–µ–±–æ–π–Ω—É—é —Ä–∞–±–æ—Ç—É.

üìö –ö–æ–º—É —ç—Ç–æ –Ω—É–∂–Ω–æ?

–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: —É–¥–æ–±–Ω–æ, –ø–æ–Ω—è—Ç–Ω–æ –∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–æ–ª—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–∞—Å—Ç–µ–Ω–∏—è—Ö, —É—Ö–∞–∂–∏–≤–∞—Ç—å –∏ –∏–∑—É—á–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏—è.

–°—Ç—É–¥–µ–Ω—Ç—ã –∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç –∫–∞–∫ –≥–æ—Ç–æ–≤—ã–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è –æ–±—É—á–µ–Ω–∏—è.

–ü–∏—Ç–æ–º–Ω–∏–∫–∏ –∏ –º–∞–≥–∞–∑–∏–Ω—ã —Ä–∞—Å—Ç–µ–Ω–∏–π: –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ —Å –∫–∞—Ç–∞–ª–æ–≥–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–π, –ø–æ–¥ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –±—Ä–µ–Ω–¥.

üöÄ –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –¥–∞–ª—å—à–µ?

–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –Ω–æ–≤—ã—Ö —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ —Å–æ—Ä—Ç–æ–≤ —Å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–º–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –Ω–∞ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.

–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ GPT –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.

–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏–π –ø–æ —Ñ–æ—Ç–æ, –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –±–æ–ª–µ–∑–Ω–µ–π –∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π (–ø–ª–∞—Ç–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è).

–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–≥–æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞: –∑–∞–∫–∞–∑ —Ä–∞—Å—Ç–µ–Ω–∏–π, —É—Å–ª—É–≥–∏ –ø–∏—Ç–æ–º–Ω–∏–∫–æ–≤ –∏ —á–∞—Å—Ç–Ω—ã—Ö –ø—Ä–æ–¥–∞–≤—Ü–æ–≤ –ø—Ä—è–º–æ —á–µ—Ä–µ–∑ –±–æ—Ç.

üßë‚Äçüíª –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å—Ç–µ–∫ –∏ –Ω–∞–≤—ã–∫–∏:

Python, FastAPI, PostgreSQL, Telegram Bot API, SQLAlchemy, Docker, Railway, –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å GPT –∏ —Å–∏—Å—Ç–µ–º–∞–º–∏ –∫–æ–º–ø—å—é—Ç–µ—Ä–Ω–æ–≥–æ –∑—Ä–µ–Ω–∏—è.

üì¢ –ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞: https://t.me/BOTanik_Channel

–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–ª–∏ –∏–¥–µ–∏, –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –±–æ—Ç–∞ –ø–æ–¥ —Ç–≤–æ–π –±–∏–∑–Ω–µ—Å ‚Äî –Ω–∞–ø–∏—à–∏: @veryhappyEpta
""",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="https://t.me/BOTanik_Channel"
        )
    else:
        handle_message(update)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update):
    text = update.message.text.strip()
    plant_list = get_plant_data(name=text)
    if plant_list:
        plant = plant_list[0]
        photo_url = f"https://tofik-san.github.io/helpPlantsBot/images/{plant['image']}"
        caption = f"<b>{plant['name']}</b>\n{plant['short_description']}"
        keyboard = [[InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_url,
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        start(update)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
def button_callback(update):
    query = update.callback_query
    query.answer()
    data = query.data

    if data.startswith("category_"):
        category = data.split("_", 1)[1]
        plants = get_plant_data(category_filter=category)
        if plants:
            keyboard = [[InlineKeyboardButton(plant['name'], callback_data=f"plant_{plant['id']}")] for plant in plants]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=query.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:", reply_markup=reply_markup)
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π.", reply_markup=get_persistent_keyboard())

    elif data.startswith("plant_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            photo_url = f"https://tofik-san.github.io/helpPlantsBot/images/{plant['image']}"
            caption = f"<b>{plant['name']}</b>\n{plant['short_description']}"
            keyboard = [[InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_photo(chat_id=query.message.chat.id, photo=photo_url, caption=caption, reply_markup=reply_markup, parse_mode="HTML")
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏.", reply_markup=get_persistent_keyboard())

    elif data.startswith("details_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            detailed_info = (
                f"üåø <b>–¢–∏–ø:</b> {plant['category_type']}\n"
                f"‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> {plant['light']}\n"
                f"üíß <b>–ü–æ–ª–∏–≤:</b> {plant['watering']}\n"
                f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {plant['temperature']}\n"
                f"ü™¥ <b>–ü–æ—á–≤–∞:</b> {plant['soil']}\n"
                f"üåª <b>–£–¥–æ–±—Ä–µ–Ω–∏—è:</b> {plant['fertilizer']}\n"
                f"‚úÇÔ∏è <b>–£—Ö–æ–¥:</b> {plant['care_tip']}"
            )
            keyboard = [[InlineKeyboardButton("üìñ –°—Ç–∞—Ç—å—è", callback_data=f"insights_{plant['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=query.message.chat.id, text=detailed_info, parse_mode="HTML", reply_markup=reply_markup)
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=get_persistent_keyboard())

    elif data.startswith("insights_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            insights_text = plant['insights'].replace("\\n", "\n")
            bot.send_message(chat_id=query.message.chat.id, text=insights_text, reply_markup=get_persistent_keyboard())
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.", reply_markup=get_persistent_keyboard())

# Webhook
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)
    if update.message:
        handle_static_buttons(update)
    elif update.callback_query:
        button_callback(update)
    return JSONResponse(content={"status": "ok"})

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
