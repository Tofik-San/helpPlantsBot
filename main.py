import logging
import os
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import (
    Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
)
from service import get_plant_data, get_bot_info

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
app = FastAPI()

# /start
def start(update):
    keyboard = [
        [InlineKeyboardButton("ü™¥ –°—É–∫–∫—É–ª–µ–Ω—Ç—ã", callback_data="category_–°—É–∫–∫—É–ª–µ–Ω—Ç—ã")],
        [InlineKeyboardButton("üåø –ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ", callback_data="category_–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ")],
        [InlineKeyboardButton("üå∏ –¶–≤–µ—Ç—É—â–∏–µ", callback_data="category_–¶–≤–µ—Ç—É—â–∏–µ")],
        [InlineKeyboardButton("üå± –õ–∏–∞–Ω—ã", callback_data="category_–õ–∏–∞–Ω—ã")],
        [InlineKeyboardButton("üì¢ –ö–∞–Ω–∞–ª", url="https://t.me/+g4KcJjJAR7pkZWJi")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    update.message.reply_text(
        "üåø –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —Ä–∞—Å—Ç–µ–Ω–∏—è–º.\n–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ –ø–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª:",
        reply_markup=reply_markup
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update):
    text = update.message.text.strip()
    if text == "üì¢ –ö–∞–Ω–∞–ª":
        update.message.reply_text(
            "üîó –ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/+g4KcJjJAR7pkZWJi"
        )
        return

    plant_list = get_plant_data(name=text)
    if plant_list:
        plant = plant_list[0]
        photo_url = f"https://tofik-san.github.io/helpPlantsBot/images/{plant['image']}"
        caption = f"<b>{plant['name']}</b>\n{plant['short_description']}"
        keyboard = [[InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_url,
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        update.message.reply_text("üåø –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def button_callback(update):
    query = update.callback_query
    query.answer()
    data = query.data

    if data.startswith("category_"):
        category = data.split("_", 1)[1]
        plants = get_plant_data(category_filter=category)
        if plants:
            keyboard = [
                [InlineKeyboardButton(plant['name'], callback_data=f"plant_{plant['id']}")]
                for plant in plants
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:", reply_markup=reply_markup)
        else:
            query.message.reply_text("–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π.")

    elif data.startswith("plant_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            photo_url = f"https://tofik-san.github.io/helpPlantsBot/images/{plant['image']}"
            caption = f"<b>{plant['name']}</b>\n{plant['short_description']}"
            keyboard = [[InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_photo(
                chat_id=query.message.chat.id,
                photo=photo_url,
                caption=caption,
                reply_markup=reply_markup,
                parse_mode="HTML"
            )
        else:
            query.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏.")

    elif data.startswith("details_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            detailed_info = (
                f"üåø <b>–¢–∏–ø:</b> {plant['category_type']}\n"
                f"‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> {plant['light']}\n"
                f"üíß <b>–ü–æ–ª–∏–≤:</b> {plant['watering']}\n"
                f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {plant['temperature']}\n"
                f"ü™¥ <b>–ü–æ—á–≤–∞:</b> {plant['soil']}\n"
                f"üåª <b>–£–¥–æ–±—Ä–µ–Ω–∏—è:</b> {plant['fertilizer']}\n"
                f"‚úÇÔ∏è <b>–£—Ö–æ–¥:</b> {plant['care_tip']}"
            )
            keyboard = [[InlineKeyboardButton("üìñ –°—Ç–∞—Ç—å—è", callback_data=f"insights_{plant['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            query.message.reply_text(detailed_info, parse_mode="HTML", reply_markup=reply_markup)
        else:
            query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.")

    elif data.startswith("insights_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            insights_text = plant['insights']
            query.message.reply_text(insights_text)
        else:
            query.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.")

# Webhook
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)

    if update.message:
        if update.message.text == "/start":
            start(update)
        else:
            handle_message(update)
    elif update.callback_query:
        button_callback(update)

    return JSONResponse(content={"status": "ok"})

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
