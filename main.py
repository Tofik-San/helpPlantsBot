from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import (
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
import logging
import os

from service import (
    get_plant_data,
    get_bot_info,
    list_varieties_by_category,
    format_plant_info_base,
    format_plant_info_extended,
    format_plant_insights
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
app = FastAPI()

CATEGORY_INFO = {
    "–°—É–∫–∫—É–ª–µ–Ω—Ç—ã": {
        "title": "–°—É–∫–∫—É–ª–µ–Ω—Ç—ã üåµ",
        "description": "–†–∞—Å—Ç–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤–ª–∞–≥—É. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç –ø–æ–ª–∏–≤–∞—Ç—å.",
        "image": "images/succulents.jpg"
    },
    "–õ–∏–∞–Ω—ã": {
        "title": "–õ–∏–∞–Ω—ã üåø",
        "description": "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤—å—é—â–∏–µ—Å—è —Ä–∞—Å—Ç–µ–Ω–∏—è. –î–æ–±–∞–≤—è—Ç –æ–±—ä—ë–º –∏ –∑–µ–ª–µ–Ω—å –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ.",
        "image": "images/lians.jpg"
    },
    "–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ": {
        "title": "–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ üå±",
        "description": "–ú–∏–Ω–∏–º—É–º –∑–∞–±–æ—Ç ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–µ–ª–µ–Ω–∏. –ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö.",
        "image": "images/green_easy.jpg"
    },
    "–¶–≤–µ—Ç—É—â–∏–µ": {
        "title": "–¶–≤–µ—Ç—É—â–∏–µ üå∏",
        "description": "–ü—ã—à–Ω—ã–µ –∏ —è—Ä–∫–∏–µ. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ü–≤–µ—Ç–µ–Ω–∏–µ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥.",
        "image": "images/flowering.jpg"
    }
}


def get_persistent_keyboard():
    keyboard = [
        [KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"), KeyboardButton("‚ùì Help")],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def get_category_inline_keyboard():
    keyboard = [
        [InlineKeyboardButton("ü™¥ –°—É–∫–∫—É–ª–µ–Ω—Ç—ã", callback_data="category_–°—É–∫–∫—É–ª–µ–Ω—Ç—ã")],
        [InlineKeyboardButton("üåø –ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ", callback_data="category_–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ")],
        [InlineKeyboardButton("üå∏ –¶–≤–µ—Ç—É—â–∏–µ", callback_data="category_–¶–≤–µ—Ç—É—â–∏–µ")],
        [InlineKeyboardButton("üå± –õ–∏–∞–Ω—ã", callback_data="category_–õ–∏–∞–Ω—ã")]
    ]
    return InlineKeyboardMarkup(keyboard)


def generate_variety_keyboard(category, index, include_article=True):
    buttons = [
        InlineKeyboardButton("‚óÄÔ∏è", callback_data=f"list_varieties_{category}_{index - 1}")
    ]
    if include_article:
        buttons.append(InlineKeyboardButton("üìñ –°—Ç–∞—Ç—å—è", callback_data=f"article_{category}_{index}"))
    buttons.append(InlineKeyboardButton("‚ñ∂Ô∏è", callback_data=f"list_varieties_{category}_{index + 1}"))
    return InlineKeyboardMarkup([buttons])


def start(update):
    bot.send_message(
        chat_id=update.message.chat.id,
        text="üåø BOTanik –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –≤–Ω–∏–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏ 'üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏'.",
        reply_markup=get_persistent_keyboard()
    )


def handle_static_buttons(update):
    text = update.message.text.strip()
    if text == "/start":
        start(update)
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="""üåø –û –ø—Ä–æ–µ–∫—Ç–µ BOTanik

(—Å–æ–∫—Ä–∞—â–µ–Ω–æ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞)

üì¢ –ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞: https://t.me/BOTanikPlants
–°–≤—è–∑—å –ø–æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤—É: @veryhappyEpta""",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        bot.send_message(chat_id=update.message.chat.id, text="https://t.me/BOTanikPlants", reply_markup=get_persistent_keyboard())
    elif text == "‚ùì Help":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="""‚ùì Help: –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º

(—Å–æ–∫—Ä–∞—â–µ–Ω–æ)

–ï—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è? –ü–∏—à–∏: @veryhappyEpta
""",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        bot.send_message(chat_id=update.message.chat.id, text="–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=get_category_inline_keyboard())


# ‚úÖ ASYNC callback
async def button_callback(update):
    query = update.callback_query
    try:
        await query.answer()
    except Exception as e:
        logger.warning(f"Failed to answer callback query: {e}")
    data = query.data

    if data.startswith("category_"):
        category = data.split("_", 1)[1]
        info = CATEGORY_INFO.get(category)
        if info:
            try:
                with open(info["image"], "rb") as photo:
                    keyboard = InlineKeyboardMarkup([
                        [InlineKeyboardButton("üìú –ö —Å–æ—Ä—Ç–∞–º", callback_data=f"list_varieties_{category}_0")]
                    ])
                    await bot.send_photo(
                        chat_id=query.message.chat.id,
                        photo=photo,
                        caption=f"<b>{info['title']}</b>\n\n{info['description']}",
                        parse_mode="HTML",
                        reply_markup=keyboard
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Ñ–æ—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ {category}: {e}")
                await bot.send_message(chat_id=query.message.chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")

    elif data.startswith("list_varieties_"):
        parts = data.split("_", 3)
        if len(parts) == 4:
            category = parts[2]
            index = int(parts[3])
            plant_list = list_varieties_by_category(category)
            if 0 <= index < len(plant_list):
                plant = plant_list[index]
                msg = format_plant_info_base(plant) + "\n\n" + format_plant_info_extended(plant)
                nav = generate_variety_keyboard(category, index, include_article=True)
                await bot.send_message(
                    chat_id=query.message.chat.id,
                    text=msg,
                    parse_mode="HTML",
                    reply_markup=nav
                )
            else:
                await bot.answer_callback_query(query.id, text="–î–∞–ª—å—à–µ —Å–æ—Ä—Ç–æ–≤ –Ω–µ—Ç.")

    elif data.startswith("article_"):
        parts = data.split("_", 2)
        if len(parts) == 3:
            category = parts[1]
            index = int(parts[2])
            plant_list = list_varieties_by_category(category)
            if 0 <= index < len(plant_list):
                plant = plant_list[index]
                article = format_plant_insights(plant) or "–°—Ç–∞—Ç—å—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç."
                nav = generate_variety_keyboard(category, index, include_article=False)
                await bot.send_message(
                    chat_id=query.message.chat.id,
                    text=f"üìñ <b>–°—Ç–∞—Ç—å—è:</b>\n{article}",
                    parse_mode="HTML",
                    reply_markup=nav
                )


@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)
    if update.message:
        handle_static_buttons(update)
    elif update.callback_query:
        await button_callback(update)
    return JSONResponse(content={"status": "ok"})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
