import logging
import os
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import (
    Bot, Update, InlineKeyboardButton, InlineKeyboardMarkup,
    ReplyKeyboardMarkup, KeyboardButton
)
from service import get_plant_data, get_bot_info

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
app = FastAPI()

# –ü–æ—Å—Ç–æ—è–Ω–Ω–∞—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞
def get_persistent_keyboard():
    keyboard = [
        [KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ"), KeyboardButton("üì¢ –ö–∞–Ω–∞–ª")],
        [KeyboardButton("‚ùì Help")],
        [KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# Inline –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
def get_category_inline_keyboard():
    keyboard = [
        [InlineKeyboardButton("ü™¥ –°—É–∫–∫—É–ª–µ–Ω—Ç—ã", callback_data="category_–°—É–∫–∫—É–ª–µ–Ω—Ç—ã")],
        [InlineKeyboardButton("üåø –ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ", callback_data="category_–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ")],
        [InlineKeyboardButton("üå∏ –¶–≤–µ—Ç—É—â–∏–µ", callback_data="category_–¶–≤–µ—Ç—É—â–∏–µ")],
        [InlineKeyboardButton("üå± –õ–∏–∞–Ω—ã", callback_data="category_–õ–∏–∞–Ω—ã")]
    ]
    return InlineKeyboardMarkup(keyboard)

# –°—Ç–∞—Ä—Ç
def start(update):
    bot.send_message(
        chat_id=update.message.chat.id,
        text="üåø BOTanik –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ.\n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –≤–Ω–∏–∑—É –∏–ª–∏ –Ω–∞–∂–º–∏ ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.",
        reply_markup=get_persistent_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫
def handle_static_buttons(update):
    text = update.message.text.strip()
    if text == "/start":
        start(update)
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="üåø –û –ø—Ä–æ–µ–∫—Ç–µ BOTanik\n\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç —É—Ö–∞–∂–∏–≤–∞—Ç—å –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–æ—Ç–æ –∏ —Å–æ–≤–µ—Ç–∞–º–∏ –ø–æ —É—Ö–æ–¥—É. –†–∞–∑–≤–∏–≤–∞–µ—Ç—Å—è –¥–ª—è –ø–∏—Ç–æ–º–Ω–∏–∫–æ–≤, –º–∞–≥–∞–∑–∏–Ω–æ–≤ –∏ –≤—Å–µ—Ö –ª—é–±–∏—Ç–µ–ª–µ–π —Ä–∞—Å—Ç–µ–Ω–∏–π.\n\nüì¢ –ö–∞–Ω–∞–ª –ø—Ä–æ–µ–∫—Ç–∞: https://t.me/BOTanik_Channel\n–°–≤—è–∑—å: @veryhappyEpta",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="https://t.me/BOTanik_Channel",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "‚ùì Help":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="‚ùì Help\n\n–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤–Ω–∏–∑—É –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.\n–ù–∞–∂–º–∏ ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ä–∞—Å—Ç–µ–Ω–∏–π.\n–ù–∞–∂–º–∏ ¬´‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ¬ª –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ.\n–ù–∞–∂–º–∏ ¬´üì¢ –ö–∞–Ω–∞–ª¬ª –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –∫–∞–Ω–∞–ª.\n\n–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —Ñ–æ—Ç–æ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ:",
            reply_markup=get_category_inline_keyboard()
        )
    else:
        handle_message(update)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
def handle_message(update):
    text = update.message.text.strip()
    plant_list = get_plant_data(name=text)
    if plant_list:
        plant = plant_list[0]
        photo_url = f"https://tofik-san.github.io/helpPlantsBot/images/{plant['image']}"
        caption = f"<b>{plant['name']}</b>\n{plant['short_description']}"
        keyboard = [[InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        bot.send_photo(
            chat_id=update.effective_chat.id,
            photo=photo_url,
            caption=caption,
            reply_markup=reply_markup,
            parse_mode="HTML"
        )
    else:
        bot.send_message(
            chat_id=update.message.chat.id,
            text="–†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É ¬´üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª.",
            reply_markup=get_persistent_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫
def button_callback(update):
    query = update.callback_query
    query.answer()
    data = query.data

    if data.startswith("category_"):
        category = data.split("_", 1)[1]
        plants = get_plant_data(category_filter=category)
        if plants:
            keyboard = [[InlineKeyboardButton(plant['name'], callback_data=f"plant_{plant['id']}")] for plant in plants]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=query.message.chat.id, text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Ç–µ–Ω–∏–µ:", reply_markup=reply_markup)
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–í —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ç–µ–Ω–∏–π.", reply_markup=get_persistent_keyboard())

    elif data.startswith("plant_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            photo_url = f"https://tofik-san.github.io/helpPlantsBot/images/{plant['image']}"
            caption = f"<b>{plant['name']}</b>\n{plant['short_description']}"
            keyboard = [[InlineKeyboardButton("üìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{plant['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_photo(chat_id=query.message.chat.id, photo=photo_url, caption=caption, reply_markup=reply_markup, parse_mode="HTML")
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–∞—Å—Ç–µ–Ω–∏–∏.", reply_markup=get_persistent_keyboard())

    elif data.startswith("details_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            detailed_info = (
                f"üåø <b>–¢–∏–ø:</b> {plant['category_type']}\n"
                f"‚òÄÔ∏è <b>–°–≤–µ—Ç:</b> {plant['light']}\n"
                f"üíß <b>–ü–æ–ª–∏–≤:</b> {plant['watering']}\n"
                f"üå°Ô∏è <b>–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:</b> {plant['temperature']}\n"
                f"ü™¥ <b>–ü–æ—á–≤–∞:</b> {plant['soil']}\n"
                f"üåª <b>–£–¥–æ–±—Ä–µ–Ω–∏—è:</b> {plant['fertilizer']}\n"
                f"‚úÇÔ∏è <b>–£—Ö–æ–¥:</b> {plant['care_tip']}"
            )
            keyboard = [[InlineKeyboardButton("üìñ –°—Ç–∞—Ç—å—è", callback_data=f"insights_{plant['id']}")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            bot.send_message(chat_id=query.message.chat.id, text=detailed_info, parse_mode="HTML", reply_markup=reply_markup)
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.", reply_markup=get_persistent_keyboard())

    elif data.startswith("insights_"):
        plant_id = int(data.split("_")[1])
        plant_list = get_plant_data(id_filter=plant_id)
        if plant_list:
            plant = plant_list[0]
            insights_text = plant['insights'].replace("\\n", "\n")
            bot.send_message(chat_id=query.message.chat.id, text=insights_text, reply_markup=get_persistent_keyboard())
        else:
            bot.send_message(chat_id=query.message.chat.id, text="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç—å—é –¥–ª—è —ç—Ç–æ–≥–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.", reply_markup=get_persistent_keyboard())

# Webhook
@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)
    if update.message:
        handle_static_buttons(update)
    elif update.callback_query:
        button_callback(update)
    return JSONResponse(content={"status": "ok"})

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
