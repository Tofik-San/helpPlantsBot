import logging
from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import (
    Bot, Update, KeyboardButton, ReplyKeyboardMarkup,
    InlineKeyboardButton, InlineKeyboardMarkup, ParseMode
)
from telegram.error import TelegramError
from service import get_plant_data, format_plant_info_base, format_plant_info_extended, get_bot_info
import os
import json

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TELEGRAM_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TELEGRAM_TOKEN)
app = FastAPI()

info_keyboard = ReplyKeyboardMarkup(
    [[KeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ø—Ä–æ–µ–∫—Ç–µ"), KeyboardButton("üõí –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É"), KeyboardButton("üìö –ö–∞—Ç–∞–ª–æ–≥"), KeyboardButton("üì¢ –ö–∞–Ω–∞–ª")]],
    resize_keyboard=True,
    one_time_keyboard=False
)

with open("plants.json", encoding="utf-8") as f:
    PLANTS = json.load(f)

def get_plant_id(plant):
    return str(abs(hash(plant.get("name"))) % (10 ** 8))

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å: {data}")
        update = Update.de_json(data, bot)

        if update.message and update.message.text:
            chat_id = update.message.chat.id
            text = update.message.text.strip()
            logger.info(f"üó£ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {chat_id} ‚Üí {text}")

            if text == "/start":
                bot.send_message(chat_id=chat_id, text="üåø–ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —Å —Ñ–æ—Ç–æ –∏ —Å–æ–≤–µ—Ç–∞–º–∏.", parse_mode=ParseMode.HTML, reply_markup=info_keyboard)
                return JSONResponse(content={"status": "ok"})

            if text == "‚ÑπÔ∏è –ò–Ω—Ñ–æ –æ –ø—Ä–æ–µ–∫—Ç–µ":
                bot_info = get_bot_info()
                bot.send_message(chat_id=chat_id, text=bot_info, parse_mode=ParseMode.HTML)
                return JSONResponse(content={"status": "ok"})

            if text == "üõí –ó–∞–∫–∞–∑–∞—Ç—å —É—Å–ª—É–≥—É":
                bot.send_message(chat_id=chat_id, text="üõí –ó–∞–∫–∞–∑ —É—Å–ª—É–≥–∏: —Ñ—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ. –ó–¥–µ—Å—å –ø–æ—è–≤–∏—Ç—Å—è –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã –ø–æ—Å–ª–µ –¥–∏–ø–ª–æ—è.", parse_mode=ParseMode.HTML, reply_markup=info_keyboard)
                return JSONResponse(content={"status": "ok"})

            if text == "üìö –ö–∞—Ç–∞–ª–æ–≥":
                catalog_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("ü™¥ –†–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è —Å–∞–¥–∞", callback_data="catalog_garden")],
                    [InlineKeyboardButton("üè† –ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è", callback_data="catalog_indoor")]
                ])
                bot.send_message(chat_id=chat_id, text="üìö –í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–∞—Ç–∞–ª–æ–≥–∞:", reply_markup=catalog_keyboard)
                return JSONResponse(content={"status": "ok"})

            if text == "üì¢ –ö–∞–Ω–∞–ª":
                bot.send_message(chat_id=chat_id, text="üîó –ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –≤ –∫–∞–Ω–∞–ª BOTanik:\nhttps://t.me/+g4KcJjJAR7pkZWJi", disable_web_page_preview=True, reply_markup=info_keyboard)
                return JSONResponse(content={"status": "ok"})

            plant = get_plant_data(text)
            if plant:
                reply = format_plant_info_base(plant)
                image_path = f"images/{plant.get('image')}"
                inline_keyboard = InlineKeyboardMarkup([
                    [InlineKeyboardButton("üìã –ü–æ–¥—Ä–æ–±–Ω–µ–µ", callback_data=f"details_{get_plant_id(plant)}")]
                ])
                try:
                    with open(image_path, "rb") as image:
                        bot.send_photo(chat_id=chat_id, photo=image, caption=reply, parse_mode=ParseMode.HTML, reply_markup=inline_keyboard)
                except FileNotFoundError:
                    bot.send_message(chat_id=chat_id, text=f"{reply}\n\n‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", parse_mode=ParseMode.HTML, reply_markup=inline_keyboard)
            else:
                bot.send_message(chat_id=chat_id, text="üå± –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ö–ª–∏–∫–Ω–∏—Ç–µ –ö–∞—Ç–∞–ª–æ–≥.", reply_markup=info_keyboard)

        if update.callback_query:
            query = update.callback_query
            chat_id = query.message.chat.id
            data = query.data
            logger.info(f"üñ± Callback: {chat_id} ‚Üí {data}")

            # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º callback, —á—Ç–æ–±—ã Telegram –Ω–µ –≤–∏—Å–µ–ª
            query.answer()

            if data.startswith("details_"):
                plant_id = data.split("_", 1)[1]
                for plant in PLANTS:
                    if get_plant_id(plant) == plant_id:
                        reply = format_plant_info_extended(plant)
                        bot.send_message(chat_id=chat_id, text=reply, parse_mode=ParseMode.HTML)
                        break
                else:
                    bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –†–∞—Å—Ç–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
                return JSONResponse(content={"status": "ok"})

            if data == "catalog_garden":
                bot.send_message(chat_id=chat_id, text="ü™¥ –†–∞—Å—Ç–µ–Ω–∏—è –¥–ª—è —Å–∞–¥–∞:\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –±–∞–∑—ã)")
                return JSONResponse(content={"status": "ok"})

            if data == "catalog_indoor":
                bot.send_message(chat_id=chat_id, text="üè† –ö–æ–º–Ω–∞—Ç–Ω—ã–µ —Ä–∞—Å—Ç–µ–Ω–∏—è:\n(–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –±–∞–∑—ã)")
                return JSONResponse(content={"status": "ok"})

        return JSONResponse(content={"status": "ok"})

    except TelegramError as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ Telegram: {e}")
        return JSONResponse(content={"status": "error", "details": str(e)}, status_code=500)
    except Exception as e:
        logger.error(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")
        return JSONResponse(content={"status": "error", "details": str(e)}, status_code=500)

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
