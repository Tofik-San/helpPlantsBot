import os
import logging
import traceback
import base64
from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes, filters
)
import httpx

# --- –ö–æ–Ω—Ñ–∏–≥–∏
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
PLANT_ID_API_KEY = os.getenv("PLANT_ID_API_KEY")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- Telegram + FastAPI
app = FastAPI()
application = Application.builder().token(TOKEN).build()
app_state_ready = False

os.makedirs("temp", exist_ok=True)

# --- /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìò –ò–Ω—Ñ–æ")],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏ üåø\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∑–∞ –Ω–∏–º —É—Ö–∞–∂–∏–≤–∞—Ç—å.",
        reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]
        file = await context.bot.get_file(photo.file_id)
        temp_path = "temp/plant.jpg"
        await file.download_to_drive(custom_path=temp_path)

        await update.message.reply_text("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–∞—Å—Ç–µ–Ω–∏–µ‚Ä¶")

        with open(temp_path, "rb") as image_file:
            image_bytes = image_file.read()
            image_b64 = base64.b64encode(image_bytes).decode("utf-8")

        async with httpx.AsyncClient() as client:
            response = await client.post(
                "https://api.plant.id/v2/identify",
                headers={"Api-Key": PLANT_ID_API_KEY},
                json={
                    "images": [image_b64],
                    "organs": ["leaf", "flower"]
                }
            )

        result = response.json()
        suggestions = result.get("suggestions", [])
        if not suggestions:
            await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
            return

        top = suggestions[0]
        name = top.get("plant_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        prob = round(top.get("probability", 0) * 100, 2)
        await update.message.reply_text(f"üå± –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ: {name} ({prob}%)")

    except Exception as e:
        logger.error(f"[handle_photo] –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è.")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–Ω–æ–ø–æ–∫
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await update.message.reply_text("–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–≥–∞–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ –ø–æ —Ñ–æ—Ç–æ –∏ –ø–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç—ã –ø–æ —É—Ö–æ–¥—É üåø")
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        await update.message.reply_text("–ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/yourchannel")
    elif text == "üìò –ò–Ω—Ñ–æ":
        await update.message.reply_text("–î–ª—è —Ä–∞–±–æ—Ç—ã –Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ Telegram –∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è. –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ ‚Äî —á–µ—Ä–µ–∑ Plant.id.")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
@app.on_event("startup")
async def startup():
    global app_state_ready
    try:
        await application.initialize()
        app_state_ready = True
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"[startup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}\n{traceback.format_exc()}")

# --- Webhook
@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        if not app_state_ready:
            logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ.")
            return {"ok": False, "error": "Not initialized"}
        await application.process_update(update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"[webhook] –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
        return {"ok": False, "error": str(e)}

# --- –ó–∞–ø—É—Å–∫
if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)