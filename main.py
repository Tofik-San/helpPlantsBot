import os
import aiohttp
import logging
from fastapi import FastAPI, Request
from telegram import Update
from telegram.ext import Application
from service import identify_plant

TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

app = FastAPI()
application = Application.builder().token(TOKEN).build()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("main")


@app.on_event("startup")
async def startup():
    await application.initialize()
    await application.bot.set_webhook(WEBHOOK_URL)
    logger.info(f"Webhook set to {WEBHOOK_URL}")


@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)

        if update.message:
            chat_id = update.message.chat.id
            text = update.message.text or ""

            if text.strip() == "/start":
                await application.bot.send_message(
                    chat_id=chat_id,
                    text="üåø –ü—Ä–∏–≤–µ—Ç! –Ø helpPlantsBot ‚Äî –±–æ—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.\n\n"
                         "üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è, –∏ —è –ø–æ–¥—Å–∫–∞–∂—É, —á—Ç–æ —ç—Ç–æ –∏ –∫–∞–∫ –∑–∞ –Ω–∏–º —É—Ö–∞–∂–∏–≤–∞—Ç—å."
                )
                return {"ok": True}

            if update.message.photo:
                file_id = update.message.photo[-1].file_id
                file = await application.bot.get_file(file_id)

                os.makedirs("temp", exist_ok=True)
                photo_path = f"temp/{file_id}.jpg"
                file_url = f"https://api.telegram.org/file/bot{TOKEN}/{file.file_path}"

                async with aiohttp.ClientSession() as session:
                    async with session.get(file_url) as resp:
                        if resp.status == 200:
                            with open(photo_path, 'wb') as f:
                                f.write(await resp.read())
                        else:
                            await application.bot.send_message(chat_id=chat_id, text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–æ—Ç–æ.")
                            return {"ok": False}

                await application.bot.send_message(chat_id=chat_id, text="üîç –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–∞—Å—Ç–µ–Ω–∏–µ...")

                result = await identify_plant(photo_path)
                os.remove(photo_path)

                if "error" in result:
                    await application.bot.send_message(chat_id=chat_id, text="‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏.")
                elif result["probability"] < 85:
                    await application.bot.send_message(chat_id=chat_id, text="ü§∑ –ù–µ —É–¥–∞–ª–æ—Å—å —Ç–æ—á–Ω–æ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ.")
                else:
                    name = result["name"]
                    await application.bot.send_message(
                        chat_id=chat_id,
                        text=f"üåø –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ: {name}\n–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['probability']}%"
                    )
            else:
                await application.bot.send_message(chat_id=chat_id, text="üì∏ –ü—Ä–∏—à–ª–∏ —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.")
        return {"ok": True}

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ Telegram webhook")
        return {"ok": False}
