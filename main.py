import os
import logging
import traceback
import base64
import imghdr
from datetime import datetime
from fastapi import FastAPI, Request
from telegram import (
    Update,
    ReplyKeyboardMarkup,
    KeyboardButton,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ContextTypes, filters
)
from service import identify_plant, generate_care_card
from limit_checker import check_and_increment_limit

# --- –ö–æ–Ω—Ñ–∏–≥–∏
TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

class _TokenFilter(logging.Filter):
    def __init__(self, token: str) -> None:
        super().__init__()
        self.token = token or ""

    def filter(self, record: logging.LogRecord) -> bool:
        if self.token:
            token_mask = "<TOKEN>"
            record.msg = str(record.msg).replace(self.token, token_mask)
            if record.args:
                record.args = tuple(
                    str(arg).replace(self.token, token_mask) if isinstance(arg, str) else arg
                    for arg in record.args
                )
        return True

logging.getLogger().addFilter(_TokenFilter(TOKEN))
logging.getLogger("httpx").setLevel(logging.WARNING)
logging.getLogger("httpx").propagate = False

# --- Telegram + FastAPI
app = FastAPI()
application = Application.builder().token(TOKEN).build()
app_state_ready = False
user_last_request = {}
os.makedirs("temp", exist_ok=True)

# --- /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [KeyboardButton("üìò –ò–Ω—Ñ–æ")],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø BOTanik! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–æ—é –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—é GreenCore. üåø\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ ‚Äî —è —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ä–∞—Å—Ç–µ–Ω–∏–µ –∏ —Ä–∞—Å—Å–∫–∞–∂—É, –∫–∞–∫ –∑–∞ –Ω–∏–º —É—Ö–∞–∂–∏–≤–∞—Ç—å.",
        reply_markup=reply_markup,
        parse_mode="HTML",
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        user_id = update.effective_user.id
        now = datetime.utcnow()

        # --- –ó–∞—â–∏—Ç–∞ –æ—Ç –∞–ª—å–±–æ–º–æ–≤
        if update.message.media_group_id:
            await update.message.reply_text("üì∏ –û—Ç–ø—Ä–∞–≤—å—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ —Ñ–æ—Ç–æ –∑–∞ —Ä–∞–∑.", parse_mode="HTML")
            return

        # --- –ê–Ω—Ç–∏—Å–ø–∞–º 15 —Å–µ–∫
        last_time = user_last_request.get(user_id)
        if last_time and (now - last_time).total_seconds() < 15:
            await update.message.reply_text("‚è± –ü–æ–¥–æ–∂–¥–∏—Ç–µ 15 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –ø–æ–ø—ã—Ç–∫–æ–π.", parse_mode="HTML")
            return
        user_last_request[user_id] = now

        # --- –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ —Ñ–æ—Ç–æ
        photo = update.message.photo[-1]
        if photo.file_size and photo.file_size > 5 * 1024 * 1024:
            await update.message.reply_text("‚ùå –§–æ—Ç–æ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ.", parse_mode="HTML")
            return

        # --- –°–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–æ—Ç–æ
        file = await context.bot.get_file(photo.file_id)
        temp_path = "temp/plant.jpg"
        await file.download_to_drive(custom_path=temp_path)

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img_type = imghdr.what(temp_path)
        if img_type not in ("jpeg", "png"):
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.", parse_mode="HTML")
            return

        # --- –õ–∏–º–∏—Ç –ø–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if not await check_and_increment_limit(user_id):
            await update.message.reply_text("üö´ –õ–∏–º–∏—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏—Å—á–µ—Ä–ø–∞–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–≤—Ç—Ä–∞.", parse_mode="HTML")
            return

        # --- –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
        await update.message.reply_text("–†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–∞—Å—Ç–µ–Ω–∏–µ‚Ä¶", parse_mode="HTML")
        result = await identify_plant(temp_path)

        if not result:
            logger.warning(f"[handle_photo] identify_plant –≤–µ—Ä–Ω—É–ª None –¥–ª—è user_id={user_id}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.", parse_mode="HTML")
            return

        suggestions = result.get("suggestions", [])
        if not suggestions:
            logger.warning(f"[handle_photo] –ü—É—Å—Ç–æ–π suggestions. Full result: {result}")
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ.", parse_mode="HTML")
            return

        top = suggestions[0]
        name = top.get("plant_name", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        prob = round(top.get("probability", 0) * 100, 2)
        details = top.get("plant_details", {})
        common_names = details.get("common_names", [])
        russian_name = common_names[0] if common_names else name

        is_plant_prob = result.get("is_plant_probability", 0)
        if is_plant_prob >= 0.2:
            keyboard = InlineKeyboardMarkup(
                [[InlineKeyboardButton("üß† –£—Ö–æ–¥ –æ—Ç BOTanika", callback_data=f"care:{name}")]]
            )
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text=f"üå± –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ: {russian_name} / {name} ({prob}%)",
                reply_markup=keyboard,
                parse_mode="HTML",
            )
        else:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
                parse_mode="HTML",
            )

    except Exception as e:
        logger.error(f"[handle_photo] –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
        await update.message.reply_text("üö´ –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", parse_mode="HTML")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ —É—Ö–æ–¥–∞
from telegram.error import BadRequest
import time

async def handle_care_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    latin_name = query.data.split(":", 1)[1]

    # ‚è± –°—Ç–∞—Ä—Ç —Ç–∞–π–º–µ—Ä–∞
    start_time = time.time()

    try:
        result = await generate_care_card(latin_name)
    except Exception as e:
        logger.error(f"[handle_care_button] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}\n{traceback.format_exc()}")
        await query.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Ö–æ–¥–∞.", parse_mode="HTML")
        return

    # üïí –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ query
    try:
        await query.answer()
    except BadRequest as e:
        if "query is too old" in str(e).lower():
            logger.warning(f"[handle_care_button] –ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–π callback: {e}")
        else:
            raise

    # üßæ –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if not result:
        await query.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É—Ö–æ–¥–∞.", parse_mode="HTML")
    else:
        await query.message.reply_text(result, parse_mode="HTML")

    logger.info(f"[handle_care_button] –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {time.time() - start_time:.2f} —Å–µ–∫.")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ –º–µ–Ω—é
async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        await update.message.reply_text("–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞...", parse_mode="HTML")
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        await update.message.reply_text("–ù–∞—à –∫–∞–Ω–∞–ª: https://t.me/BOTanikPlants", parse_mode="HTML")
    elif text == "üìò –ò–Ω—Ñ–æ":
        await update.message.reply_text("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é...", parse_mode="HTML")

# --- –•–µ–Ω–¥–ª–µ—Ä—ã
application.add_handler(CommandHandler("start", start))
application.add_handler(MessageHandler(filters.PHOTO, handle_photo))
application.add_handler(CallbackQueryHandler(handle_care_button))
application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))

@app.on_event("startup")
async def startup():
    global app_state_ready
    try:
        await application.initialize()
        app_state_ready = True
        await application.bot.set_webhook(WEBHOOK_URL)
        logger.info("Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"[startup] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}\n{traceback.format_exc()}")

@app.post("/webhook")
async def telegram_webhook(request: Request):
    try:
        data = await request.json()
        update = Update.de_json(data, application.bot)
        if not app_state_ready:
            logger.warning("–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ –≥–æ—Ç–æ–≤–æ.")
            return {"ok": False, "error": "Not initialized"}
        await application.process_update(update)
        return {"ok": True}
    except Exception as e:
        logger.error(f"[webhook] –û—à–∏–±–∫–∞: {e}\n{traceback.format_exc()}")
        return {"ok": False, "error": str(e)}

if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
