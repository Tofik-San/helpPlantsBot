from fastapi import FastAPI, Request
from fastapi.responses import JSONResponse
from telegram import (
    Bot,
    Update,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
    ReplyKeyboardMarkup,
    KeyboardButton,
)
import logging
import os

from service import (
    get_plant_data,
    get_bot_info,
    list_varieties_by_category,
    format_plant_info_base,
    format_plant_info_extended,
    format_plant_insights,
    identify_plant
)

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN)
app = FastAPI()

CATEGORY_INFO = {
    "–°—É–∫–∫—É–ª–µ–Ω—Ç—ã": {
        "title": "–°—É–∫–∫—É–ª–µ–Ω—Ç—ã üåµ",
        "description": "–†–∞—Å—Ç–µ–Ω–∏—è, —Å–ø–æ—Å–æ–±–Ω—ã–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –≤–ª–∞–≥—É. –û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∑–∞–±—ã–≤–∞–µ—Ç –ø–æ–ª–∏–≤–∞—Ç—å.",
        "image": "images/succulents.jpg"
    },
    "–õ–∏–∞–Ω—ã": {
        "title": "–õ–∏–∞–Ω—ã üåø",
        "description": "–î–µ–∫–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –≤—å—é—â–∏–µ—Å—è —Ä–∞—Å—Ç–µ–Ω–∏—è. –î–æ–±–∞–≤—è—Ç –æ–±—ä—ë–º –∏ –∑–µ–ª–µ–Ω—å –≤ –∏–Ω—Ç–µ—Ä—å–µ—Ä–µ.",
        "image": "images/lians.jpg"
    },
    "–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ": {
        "title": "–ù–µ–ø—Ä–∏—Ö–æ—Ç–ª–∏–≤—ã–µ –∑–µ–ª—ë–Ω—ã–µ üå±",
        "description": "–ú–∏–Ω–∏–º—É–º –∑–∞–±–æ—Ç ‚Äî –º–∞–∫—Å–∏–º—É–º –∑–µ–ª–µ–Ω–∏. –ò–¥–µ–∞–ª—å–Ω—ã –¥–ª—è –∑–∞–Ω—è—Ç—ã—Ö.",
        "image": "images/green_easy.jpg"
    },
    "–¶–≤–µ—Ç—É—â–∏–µ": {
        "title": "–¶–≤–µ—Ç—É—â–∏–µ üå∏",
        "description": "–ü—ã—à–Ω—ã–µ –∏ —è—Ä–∫–∏–µ. –î–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –≤–∏–¥–µ—Ç—å —Ü–≤–µ—Ç–µ–Ω–∏–µ –∫—Ä—É–≥–ª—ã–π –≥–æ–¥.",
        "image": "images/flowering.jpg"
    }
}


def get_persistent_keyboard():
    keyboard = [
        [KeyboardButton("üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏"), KeyboardButton("‚ùì Help")],
        [KeyboardButton("üì¢ –ö–∞–Ω–∞–ª"), KeyboardButton("‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)


def start(update):
    bot.send_message(
        chat_id=update.message.chat.id,
        text="üåø BOTanik –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ. –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ.",
        reply_markup=get_persistent_keyboard()
    )


def handle_static_buttons(update):
    text = update.message.text.strip()
    if text == "/start":
        start(update)
    elif text == "‚ÑπÔ∏è –û –ø—Ä–æ–µ–∫—Ç–µ":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="üîé –ë–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–∞—Å—Ç–µ–Ω–∏–π –∏ –≤—ã–¥–∞—á–∏ –∫–∞—Ä—Ç–æ—á–µ–∫ —É—Ö–æ–¥–∞.\n\nüì∑ –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è ‚Äî –±–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏—Ç –µ–≥–æ –∏ –ø–æ–∫–∞–∂–µ—Ç, –∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å.",
            reply_markup=get_persistent_keyboard()
        )
    elif text == "üì¢ –ö–∞–Ω–∞–ª":
        bot.send_message(chat_id=update.message.chat.id, text="https://t.me/BOTanikPlants", reply_markup=get_persistent_keyboard())
    elif text == "‚ùì Help":
        bot.send_message(
            chat_id=update.message.chat.id,
            text="üì∑ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —Ä–∞—Å—Ç–µ–Ω–∏—è.\nüß† –ú—ã —Ä–∞—Å–ø–æ–∑–Ω–∞–µ–º –µ–≥–æ –∏ –ø–æ–∫–∞–∂–µ–º, –∫–∞–∫ —É—Ö–∞–∂–∏–≤–∞—Ç—å.\n\n–ï—Å–ª–∏ –±–æ—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª ‚Äî –ø–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ.",
            reply_markup=get_persistent_keyboard()
        )


@app.post("/webhook")
async def webhook(request: Request):
    data = await request.json()
    update = Update.de_json(data, bot)

    if update.message and update.message.photo:
        file_id = update.message.photo[-1].file_id
        file = await bot.get_file(file_id)

        if not os.path.exists("temp"):
            os.makedirs("temp")

        photo_path = f"temp/{file_id}.jpg"
        await file.download_to_drive(photo_path)

        await bot.send_message(
            chat_id=update.message.chat.id,
            text="üîÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–æ—Ç–æ..."
        )

        result = await identify_plant(photo_path)
        if "error" in result:
            await bot.send_message(
                chat_id=update.message.chat.id,
                text="üö´ –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ä–∞—Å—Ç–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ —Ñ–æ—Ç–æ."
            )
            return JSONResponse(content={"status": "plant_id_error"})

        latin_name = result["latin_name"]
        probability = result["probability"]

        await bot.send_message(
            chat_id=update.message.chat.id,
            text=f"üåø –ü–æ—Ö–æ–∂–µ, —ç—Ç–æ <b>{latin_name}</b>\n(—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {probability}%)",
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("üìã –£—Ö–æ–¥", callback_data=f"care_{latin_name}")]
            ])
        )

        return JSONResponse(content={"status": "plant_identified"})

    if update.message:
        handle_static_buttons(update)

    elif update.callback_query:
        data = update.callback_query.data

        if data.startswith("care_"):
            latin = data.split("_", 1)[1]
            plant_list = get_plant_data(name=latin)
            if plant_list:
                plant = plant_list[0]
                msg = format_plant_info_base(plant) + "\n\n" + format_plant_info_extended(plant)
                await bot.send_message(
                    chat_id=update.callback_query.message.chat.id,
                    text=msg,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=update.callback_query.message.chat.id,
                    text="‚ùå –ù–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–∞–∫–æ–º —Ä–∞—Å—Ç–µ–Ω–∏–∏."
                )

    return JSONResponse(content={"status": "ok"})


if __name__ == "__main__":
    import uvicorn
    uvicorn.run("main:app", host="0.0.0.0", port=8080)
