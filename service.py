import os
import logging
import aiohttp
import requests
from urllib.parse import urlparse
from openai import AsyncOpenAI

PLANT_ID_API_KEY = os.getenv("PLANT_ID_API_KEY")
SERPAPI_KEY = os.getenv("SERPAPI_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

logger = logging.getLogger(__name__)

HEADERS = {
    "Content-Type": "application/json",
    "Api-Key": PLANT_ID_API_KEY
}


async def identify_plant(image_path: str) -> dict:
    try:
        with open(image_path, "rb") as image_file:
            image_data = image_file.read()
    except Exception as e:
        logger.error(f"[identify_plant] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {image_path}: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"}

    url = "https://api.plant.id/v2/identify"
    payload = {
        "images": [image_data.decode("latin1")],
        "modifiers": ["similar_images"],
        "plant_language": "ru",
        "plant_details": ["common_names", "url", "name_authority", "wiki_description", "taxonomy"]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=HEADERS, json=payload) as resp:
                if resp.status != 200:
                    logger.error(f"[identify_plant] API –æ—Ç–≤–µ—Ç {resp.status}: {await resp.text()}")
                    return {"error": f"Plant.id API –æ—Ç–≤–µ—Ç {resp.status}"}
                return await resp.json()
    except Exception as e:
        logger.error(f"[identify_plant] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Plant.id: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ Plant.id: {str(e)}"}


# --- PostgreSQL connection pool
import asyncpg

DATABASE_URL = os.getenv("DATABASE_URL")
parsed = urlparse(DATABASE_URL) if DATABASE_URL else None

PG_USER = parsed.username if parsed else None
PG_PASSWORD = parsed.password if parsed else None
PG_HOST = parsed.hostname if parsed else None
PG_PORT = parsed.port if parsed else None
PG_DB = parsed.path[1:] if parsed and parsed.path.startswith('/') else None

_pool = None

async def get_pool():
    global _pool
    if _pool is None:
        _pool = await asyncpg.create_pool(
            host=PG_HOST,
            port=PG_PORT,
            user=PG_USER,
            password=PG_PASSWORD,
            database=PG_DB,
        )
    return _pool


async def get_card_by_latin_name(latin_name: str) -> dict | None:
    pool = await get_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT latin_name, text FROM gpt_cards WHERE latin_name=$1",
            latin_name,
        )
        return dict(row) if row else None


async def save_card(data: dict):
    pool = await get_pool()
    async with pool.acquire() as conn:
        query = """
        INSERT INTO gpt_cards (latin_name, text)
        VALUES ($1, $2)
        ON CONFLICT (latin_name) DO UPDATE
        SET text = EXCLUDED.text
        """
        await conn.execute(query, data.get("latin_name"), data.get("text"))


# --- SerpAPI integration
def get_snippets_from_serpapi(latin_name: str) -> list[str]:
    params = {
        "engine": "google",
        "q": f"{latin_name} —É—Ö–æ–¥ site:.ru",
        "hl": "ru",
        "num": 5,
        "api_key": SERPAPI_KEY
    }
    try:
        response = requests.get("https://serpapi.com/search", params=params)
        data = response.json()

        snippets = []
        for result in data.get("organic_results", []):
            snippet = result.get("snippet")
            if snippet:
                snippets.append(snippet)

        return snippets
    except Exception as e:
        logger.error(f"[SerpAPI] –û—à–∏–±–∫–∞: {e}")
        return []


# --- GPT card generation
async def generate_card_with_gpt(latin_name: str, snippets: list[str]) -> str:
    prompt = f"""–¢—ã ‚Äî –±–æ—Ç–∞–Ω–∏–∫-—ç–∫—Å–ø–µ—Ä—Ç.

–í–æ—Ç –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{latin_name}":

{'\n'.join(snippets)}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ª–∞–∫–æ–Ω–∏—á–Ω—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É—Ö–æ–¥–∞.

–í—ã–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
–ù–∞–∑–≤–∞–Ω–∏–µ: [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å] ({latin_name})
–°–≤–µ—Ç: ...
–ü–æ–ª–∏–≤: ...
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ...
–ü–æ—á–≤–∞: ...
–£–¥–æ–±—Ä–µ–Ω–∏—è: ...
–°–æ–≤–µ—Ç—ã: ...

üîí –ü—Ä–∞–≤–∏–ª–∞:
‚Äì –í—Å–µ –ø—É–Ω–∫—Ç—ã ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, —á—ë—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
‚Äì –Ø–∑—ã–∫ ‚Äî —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π.
‚Äì –°—Ç–∏–ª—å ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–π, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π –ª–∏—Ä–∏–∫–∏.
‚Äì –§–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ Telegram (–±–µ–∑ markdown, emoji –∏ HTML).
‚Äì –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –ø—É–Ω–∫—Ç—É –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ–≥–æ.

üìå –ù–∞–∑–≤–∞–Ω–∏—è:
–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –ª–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ª–æ–≤–∞—Ä—é.
‚Äì –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –∏–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ.
‚Äì –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–µ.
‚Äì –ù–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–π, –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏ –¥–æ—Å–ª–æ–≤–Ω–æ, –Ω–µ —Å–æ—á–∏–Ω—è–π.

üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–æ:
‚Äì –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–∞—Ä–æ–¥–Ω—ã–µ –∏–ª–∏ –æ–±–∏—Ö–æ–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
‚Äì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π.
‚Äì –ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ –ø–∏—à–∏ Codiaeum —Å —Ä—ã–±–∫–æ–π. –£–±–µ—Ä–∏ —ç—Ç–æ.
‚Äì –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."""

    try:
        response = await openai_client.chat.completions.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}]
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"[generate_card_with_gpt] –û—à–∏–±–∫–∞: {e}")
        return "‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ —á–µ—Ä–µ–∑ GPT."
