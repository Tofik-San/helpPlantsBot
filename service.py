import os
import logging
import aiohttp
import html
from urllib.parse import urlparse
import asyncpg
from loguru import logger
from faiss_search import get_chunks_by_latin_name
from openai import AsyncOpenAI

# --- ENV ---
PLANT_ID_API_KEY = os.getenv("PLANT_ID_API_KEY")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
openai_client = AsyncOpenAI(api_key=OPENAI_API_KEY)

# --- HEADERS ---
HEADERS = {
    "Content-Type": "application/json",
    "Api-Key": PLANT_ID_API_KEY
}

# --- IDENTIFY PLANT ---
async def identify_plant(image_path: str) -> dict:
    try:
        with open(image_path, "rb") as image_file:
            image_data = image_file.read()
    except Exception as e:
        logger.error(f"[identify_plant] –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {image_path}: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: {str(e)}"}

    url = "https://api.plant.id/v2/identify"
    payload = {
        "images": [image_data.decode("latin1")],
        "modifiers": ["similar_images"],
        "plant_language": "ru",
        "plant_details": ["common_names", "url", "name_authority", "wiki_description", "taxonomy"]
    }

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(url, headers=HEADERS, json=payload) as resp:
                if resp.status != 200:
                    logger.error(f"[identify_plant] API –æ—Ç–≤–µ—Ç {resp.status}: {await resp.text()}")
                    return {"error": f"Plant.id API –æ—Ç–≤–µ—Ç {resp.status}"}
                return await resp.json()
    except Exception as e:
        logger.error(f"[identify_plant] –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Plant.id: {e}")
        return {"error": f"–û—à–∏–±–∫–∞ Plant.id: {str(e)}"}

# --- DATABASE ---
DATABASE_URL = os.getenv("DATABASE_URL")
parsed = urlparse(DATABASE_URL) if DATABASE_URL else None

PG_USER = parsed.username if parsed else None
PG_PASSWORD = parsed.password if parsed else None
PG_HOST = parsed.hostname if parsed else None
PG_PORT = parsed.port if parsed else None
PG_DB = parsed.path[1:] if parsed and parsed.path.startswith('/') else None

_pool = None

async def get_pool():
    global _pool
    if _pool is None:
        _pool = await asyncpg.create_pool(
            host=PG_HOST,
            port=PG_PORT,
            user=PG_USER,
            password=PG_PASSWORD,
            database=PG_DB,
        )
    return _pool

async def get_card_by_latin_name(latin_name: str) -> dict | None:
    pool = await get_pool()
    async with pool.acquire() as conn:
        row = await conn.fetchrow(
            "SELECT latin_name, text FROM gpt_cards WHERE latin_name=$1",
            latin_name,
        )
        return dict(row) if row else None

async def save_card(data: dict):
    pool = await get_pool()
    async with pool.acquire() as conn:
        query = """
        INSERT INTO gpt_cards (latin_name, text)
        VALUES ($1, $2)
        ON CONFLICT (latin_name) DO UPDATE
        SET text = EXCLUDED.text
        """
        await conn.execute(query, data.get("latin_name"), data.get("text"))

# --- CARD GENERATION ---
async def generate_care_card(latin_name: str) -> str:
    data = await get_card_by_latin_name(latin_name)
    if data:
        return f"<pre>{html.escape(data.get('text', '')[:3000])}</pre>"

    chunks = get_chunks_by_latin_name(latin_name)
    if not chunks:
        return f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –ø–æ: {latin_name}"

    prompt_text = f"""–¢—ã ‚Äî —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ —É—Ö–æ–¥—É –∑–∞ —Ä–∞—Å—Ç–µ–Ω–∏—è–º–∏.
–°–æ—Å—Ç–∞–≤—å —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É—Ö–æ–¥–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∏–∂–µ.

–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∞—Å—Ç–µ–Ω–∏—è: {latin_name}

–§—Ä–∞–≥–º–µ–Ω—Ç—ã:
{chr(10).join(f'- {s}' for s in chunks)}

–°–æ–±–µ—Ä–∏ –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è Telegram. –ë–µ–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤. –ë–µ–∑ –≤–æ–¥—ã. –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –ø–æ —Å–º—ã—Å–ª—É:
üåø –ù–∞–∑–≤–∞–Ω–∏–µ:
{latin_name}

üß¨ –°–µ–º–µ–π—Å—Ç–≤–æ:
(—É—Ç–æ—á–Ω—è–µ—Ç—Å—è –∏–∑ —á–∞–Ω–∫–æ–≤)

üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è:
(—É—Ç–æ—á–Ω—è–µ—Ç—Å—è –∏–∑ —á–∞–Ω–∫–æ–≤)

üí° –°–≤–µ—Ç:
...

üíß –ü–æ–ª–∏–≤:
...

üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞:
...

üí® –í–ª–∞–∂–Ω–æ—Å—Ç—å:
...

üçΩ –£–¥–æ–±—Ä–µ–Ω–∏—è:
...

üå± –ü–æ—á–≤–∞:
...

‚ôª –ü–µ—Ä–µ—Å–∞–¥–∫–∞:
...

üß¨ –†–∞–∑–º–Ω–æ–∂–µ–Ω–∏–µ:
...

‚≠ê –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
...

–ü—Ä–∞–≤–∏–ª–∞:
- –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ñ–∞–∫—Ç—ã –∏–∑ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π.
- –ï—Å–ª–∏ –±–ª–æ–∫–∞ –Ω–µ—Ç ‚Äî –ø–∏—à–∏: \"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.\"
- –ù–µ –º–µ–Ω—è–π –ø–æ—Ä—è–¥–æ–∫ –±–ª–æ–∫–æ–≤.
- –≠–º–æ–¥–∑–∏ ‚Äî —Ç–æ–ª—å–∫–æ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö.
- –ë–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö (\"—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è\", \"—Å–ª–µ–¥—É–µ—Ç\", \"–≤–∞–∂–Ω–æ\")."""

    completion = await openai_client.chat.completions.create(
        model="gpt-4-turbo",
        messages=[{"role": "user", "content": prompt_text}],
        max_tokens=1500,
        temperature=0.3
    )

    gpt_raw = completion.choices[0].message.content.strip()
    gpt_raw = gpt_raw.replace("**", "").replace("__", "")

    await save_card({
        "latin_name": latin_name,
        "text": gpt_raw
    })

    return f"<pre>{html.escape(gpt_raw[:3000])}</pre>"
