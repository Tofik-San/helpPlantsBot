import logging
import httpx
import os
import openai

SERPAPI_KEY = os.getenv("SERPAPI_KEY")
openai.api_key = os.getenv("OPENAI_API_KEY")


async def get_snippets_from_serpapi(latin_name: str, max_snippets: int = 10) -> list[str]:
    logging.info(f"[SerpAPI] –ü–æ–∏—Å–∫ –ø–æ: {latin_name}")

    query = (
        f"{latin_name} "
        "—É—Ö–æ–¥ OR —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ OR –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ OR —Å–æ–≤–µ—Ç—ã OR –ª–∞–π—Ñ—Ö–∞–∫–∏ "
        "site:.ru"
    )

    url = "https://serpapi.com/search"
    params = {
        "engine": "google",
        "q": query,
        "api_key": SERPAPI_KEY,
        "hl": "ru",
        "num": 20,
    }

    try:
        async with httpx.AsyncClient() as client:
            response = await client.get(url, params=params, timeout=15)
            response.raise_for_status()
            data = response.json()

        results = data.get("organic_results", [])
        snippets = [
            item["snippet"].strip()
            for item in results
            if "snippet" in item
        ][:max_snippets]

        logging.info(f"[SerpAPI] –ù–∞–π–¥–µ–Ω–æ —Å–Ω–∏–ø–ø–µ—Ç–æ–≤: {len(snippets)}")
        return snippets

    except Exception as e:
        logging.error(f"[SerpAPI] –û—à–∏–±–∫–∞: {e}")
        return []


async def generate_card_with_gpt(latin_name: str, snippets: list[str]) -> str:
    logging.info(f"[GPT] –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–ª—è: {latin_name}")
    source_text = "\n".join(snippets).strip()

    prompt = f"""–¢—ã ‚Äî –±–æ—Ç–∞–Ω–∏–∫-—ç–∫—Å–ø–µ—Ä—Ç.

–í–æ—Ç –≤—ã–¥–µ—Ä–∂–∫–∏ –∏–∑ —Ä—É—Å—Å–∫–∏—Ö —Å–∞–π—Ç–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É "{latin_name}":

{source_text}

–ù–∞ –æ—Å–Ω–æ–≤–µ —ç—Ç–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ª–∞–∫–æ–Ω–∏—á–Ω—É—é, —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É —É—Ö–æ–¥–∞.

–í—ã–≤–æ–¥ —Å—Ç—Ä–æ–≥–æ –ø–æ —Ñ–æ—Ä–º–∞—Ç—É:
–ù–∞–∑–≤–∞–Ω–∏–µ: [–æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ, –µ—Å–ª–∏ –µ—Å—Ç—å] ({latin_name})
–°–≤–µ—Ç: ...
–ü–æ–ª–∏–≤: ...
–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: ...
–ü–æ—á–≤–∞: ...
–£–¥–æ–±—Ä–µ–Ω–∏—è: ...
–°–æ–≤–µ—Ç—ã: ...

üîí –ü—Ä–∞–≤–∏–ª–∞:
‚Äì –í—Å–µ –ø—É–Ω–∫—Ç—ã ‚Äî –∫–æ—Ä–æ—Ç–∫–æ, —á—ë—Ç–∫–æ, –±–µ–∑ –ª–∏—à–Ω–µ–≥–æ —Ç–µ–∫—Å—Ç–∞.
‚Äì –Ø–∑—ã–∫ ‚Äî —Ç–æ–ª—å–∫–æ —Ä—É—Å—Å–∫–∏–π.
‚Äì –°—Ç–∏–ª—å ‚Äî —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏ —Ç–æ—á–Ω—ã–π, –±–µ–∑ –æ—Ü–µ–Ω–æ–∫ –∏ –æ–ø–∏—Å–∞—Ç–µ–ª—å–Ω–æ–π –ª–∏—Ä–∏–∫–∏.
‚Äì –§–æ—Ä–º–∞—Ç –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è Telegram (–±–µ–∑ markdown, emoji –∏ HTML).
‚Äì –ï—Å–ª–∏ –¥–∞–Ω–Ω—ã—Ö –ø–æ –∫–∞–∫–æ–º—É-–ª–∏–±–æ –ø—É–Ω–∫—Ç—É –Ω–µ—Ç ‚Äî –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏ –µ–≥–æ.

üìå –ù–∞–∑–≤–∞–Ω–∏—è:
–ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–π –ª–∞—Ç–∏–Ω—Å–∫–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ –±–æ—Ç–∞–Ω–∏—á–µ—Å–∫–æ–º—É —Å–ª–æ–≤–∞—Ä—é.
‚Äì –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ä—É—Å—Å–∫–æ–µ –∏–º—è ‚Äî –∏—Å–ø–æ–ª—å–∑—É–π –µ–≥–æ.
‚Äì –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Å—Ç–∞–≤—å —Ç–æ–ª—å–∫–æ –ª–∞—Ç–∏–Ω—Å–∫–æ–µ.
‚Äì –ù–µ —Ç—Ä–∞–Ω—Å–ª–∏—Ç–µ—Ä–∏—Ä—É–π, –Ω–µ –ø–µ—Ä–µ–≤–æ–¥–∏ –¥–æ—Å–ª–æ–≤–Ω–æ, –Ω–µ —Å–æ—á–∏–Ω—è–π.

–ü—Ä–∏–º–µ—Ä—ã:
‚Ä¢ Ficus elastica ‚Üí –†–µ–∑–∏–Ω–æ–≤–æ–µ –¥–µ—Ä–µ–≤–æ (Ficus elastica)
‚Ä¢ Euonymus alatus ‚Üí –ë–µ—Ä–µ—Å–∫–ª–µ—Ç –∫—Ä—ã–ª–∞—Ç—ã–π (Euonymus alatus)
‚Ä¢ Ficus benjamina ‚Üí –§–∏–∫—É—Å –ë–µ–Ω–¥–∂–∞–º–∏–Ω–∞ (Ficus benjamina)
‚Ä¢ Thaumatophyllum xanadu ‚Üí Thaumatophyllum xanadu

üö´ –ó–∞–ø—Ä–µ—â–µ–Ω–æ:
‚Äì –ü—Ä–∏–¥—É–º—ã–≤–∞—Ç—å –Ω–∞—Ä–æ–¥–Ω—ã–µ –∏–ª–∏ –æ–±–∏—Ö–æ–¥–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è.
‚Äì –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–∞—Ñ–æ—Ä—ã, —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –∏–ª–∏ –∑–Ω–∞–∫–æ–≤—ã–µ –≤–∞—Ä–∏–∞—Ü–∏–∏ —Ä–∞—Å—Ç–µ–Ω–∏–π.
‚Äì –ù–∞–ø—Ä–∏–º–µ—Ä: –Ω–µ –ø–∏—à–∏ Codiaeum —Å —Ä—ã–±–∫–æ–π. –£–±–µ—Ä–∏ —ç—Ç–æ.
‚Äì –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–µ —Ä—É—Å—Å–∫–∏–µ –∏–º–µ–Ω–∞, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å."""

    try:
        response = await openai.ChatCompletion.acreate(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": prompt}],
        )
        return response.choices[0].message.content.strip()

    except Exception as e:
        logging.error(f"[GPT] –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–æ—á–∫–∏: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —É—Ö–æ–¥–∞."
